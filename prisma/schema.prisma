datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticator")
}

// =============================== AI 对话 ===============================
model AIConversation {
  id        String    @id @default(cuid())
  name      String // 对话名称，可选
  desc      String? // 对话描述
  userId    String // 所属用户
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // 删除时间

  messages AIMessage[] // 关联的消息

  @@index([userId])
  @@map("ai_conversation")
}

model AIMessage {
  id                      String    @id @default(cuid())
  role                    String // 'system' | 'user' | 'assistant' | 'data' | 'tool'
  content                 String    @db.Text
  token                   Int
  userId                  String // 所属用户
  conversationId          String // 所属对话分组
  experimentalAttachments Json? // experimental_attachments: 存储为 JSON 数据
  toolInvocations         Json? // 存储 toolInvocations
  annotations             Json? // 存储额外注释
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  deletedAt               DateTime? // 删除时间

  conversation AIConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([userId, conversationId])
  @@map("ai_message")
}
